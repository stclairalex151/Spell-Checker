This program was to be implemented as a network-based spell checker program, with multiple threads. The main thread is responsible for setting up the data structures, files, and worker threads. The main thread also listens for incoming connections, and adds them to a circular FIFO queue to be serviced. The worker threads wait for elements to be added to the queue, then pulls them off one by one. Once released from the queue, the worker thread prompts the user for a word, checks its existence is a pre-determined dictionary, and returns that word with its status to the user. It also adds this status to another FIFO queue, where an additional logger thread removes the elements from this queue and writes them to a log file (serverlog.txt). Condition variables are used to ensure safe insertion and removal from the queues, and mutex variables are used to enforce mutual exclusion. I used a condition variable for production and consumption for each queue, so 4 total. In addidion to the 2 mutex variables (one for each queue), these variables are all tied into the buf struct, which is global so that all threads may access it. This program was tested on the functionality of the circular queues, the thread creation, and the dictionary lookup functionality. Screenshots are included in the repository folder. As far as known bugs are concerned, the program seems to declare every entry as misspelled after a few trials. I ensured that the strings being compared in the lookup function are trimmed and identical, but cannot quite solve why they are not being found in the dictionary file.
